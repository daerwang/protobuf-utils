{"name":"Protobuf-utils","tagline":"","body":"# Google Protocol Buffers' Utils\r\n==============\r\n\r\n## Streams\r\nclasses Message{Input,Ouput}Stream are factories for compressed/plain and binary/text message streams.\r\n\r\n## Command line utiilities\r\nIn the folder 'precompiled' we placed the following:\r\n* Precompiled jar containing all dependencies: protobuf-utils-1.0-SNAPSHOT-jar-with-dependencies.jar\r\n* An example of protocol definition Geom.proto (copied from test/resources)\r\n* An example of compressed binary message stream shapes.bin.gz\r\n\r\n### Cat\r\nCommand line utility for printing from/to different file formats.\r\n\r\n#### Usage\r\nnet.katros.services.proto.PCat [-zZtTbB] {root-msg} [{input-file}|-]*\r\n\r\nFlags:\r\n* -z input is gzipped\r\n* -t input is text\r\n* -b input is binary\r\n* -Z gzipped output\r\n* -T text output \r\n* -B binary output\r\n* -t/-b and -T/-B are mutually exclusive\r\n\r\n#### Example: print binary gizpped stream as a text\r\ncd precompiled\r\njava -cp geim.jar:protobuf-utils-1.0-SNAPSHOT-jar-with-dependencies.jar net.katros.services.proto.PCat -zbT Shape shapes.bin.gz\r\n\r\n### Grep\r\nCommand line utility for searching messages within file(s).\r\n\r\n#### Usage\r\nnet.katros.services.proto.PGrep  [options]* {input-file}*\r\n\r\nOptions: \r\n* -q {<query-expression}\tMandatory. Should apear only once.\r\n* -p {print-expression}\tOptional. Default is \"$\". Can apear several times.\r\n* -d {delimiter}\tOptional. Default is \"-\"\r\n* -o {output-file}\tOptional. Default is \"-\"\r\n* -m {message-name>\tMandatory. Root message.\r\n* -z\tOptional. Default false. Input is gzipped.\r\n* -Z\tOptional. Default false. Output will gzipped.\r\n* -t\tOptional. Default false. Input format assumed text.\r\n* -T\tOptional. Default true.  Output format will text.\r\n* -b\tOptional. Default true.  Input format assumed binary.\r\n* -B\tOptional. Default false. Output format will binary.\r\n* -t\tOptional. Default true.  Input format assumed binary.\r\n* -T\tOptional. Default false. Output format will binary.\r\n* -d\tOptional. Default false. Dry run. I.e. just check syntax.\r\n\r\nSyntax essentials:\r\n* $ current message\r\n* $$ previous message\r\n* use any type of brackets: [] {} ()\r\n* Most java operators can be used in expressions\r\n* Operator '=~' matches regular expression \r\n\r\nRun the examples below in the 'precompiled' directory:\r\n\r\n#### Example I: find all polygons\r\n./proto-grep -zbmq Shape \"type == 'POLYGON'\" shapes.bin.gz\r\n\r\n#### Example II: find all squares where previous two shapes were also square. Print the first one.\r\n./proto-grep -zbmq Shape 'type == \"SQUARE\" && $$.type == \"SQUARE\" && $$$.type == \"SQUARE\"' -p '$$$' shapes.bin.gz\r\n\r\n#### Example III: find all squares with even width. Print corner\r\n./proto-grep -zbmq Shape 'type == \"SQUARE\" && shape@Square.width % 2 == 0' -p 'shape@Square.corner' shapes.bin.gz\r\n\r\n#### Example IV: find all squares with width > corner.x * corner.y\r\n./proto-grep -zbmq Shape 'type == \"SQUARE\" && shape@Square.width > shape@Square.corner.x * shape@Square.corner.y'  shapes.bin.gz\r\n\r\n#### Example V: shorter version of Example IV. \r\n./proto-grep -zbmq Shape 'type == \"SQUARE\" && shape@Square.{width > corner.{x * y}}'  shapes.bin.gz\r\n\r\n#### Example VI: Find all polygons with point i,j s.t. points[i].x > points[i].y , print points indices, and the shape id.\r\n./proto-grep -zabmq Shape 'type == \"POLYGON\" && shape@Polygon.points[i].x >  shape@Polygon.points[j].y' -p 'id,i,j' shapes.bin.gz\r\n\r\n#### Example VII: Same as Example VI, but find all appearances. (flag -a)\r\n./proto-grep -zabmq Shape  'type == \"POLYGON\" && shape@Polygon.points[i].x >  shape@Polygon.points[j].y' -p 'id,i,j' shapes.bin.gz\r\n\r\n## FAQ\r\nTBA\r\n\r\n==============\r\nPlease do not hesitate to contact me (boris@temk.org), in case of any questions.\r\n\r\n==============\r\nSpecial thanks to Katros Ltd. for allowing me to make this code publicly available.\r\n","google":"UA-43939319-3","note":"Don't delete this file! It's used internally to help with page regeneration."}